'''
    类是抽象的，也称之为“对象的模板”。我们需要通过类这个模板，创建类的实例对象，然
后才能使用类定义的功能。
    我们前面说过一个 Python 对象包含三个部分：id（identity 识别码）、type（对象类型）、
value（对象的值）。
    现在，我们可以更进一步的说，一个 Python 对象包含如下部分：
        1. id（identity 识别码）
        2. type（对象类型）
        3. value（对象的值）
            (1) 属性（attribute）
            (2) 方法（method）
    创建对象，我们需要定义构造函数__init__()方法。构造方法用于执行“实例对象的初始化工
作”，即对象创建后，初始化当前对象的相关属性，无返回值。

__init__()的要点如下：
    1. 名称固定，必须为：__init__()
    2. 第一个参数固定，必须为：self。 self 指的就是刚刚创建好的实例对象。
    3. 构造函数通常用来初始化实例对象的实例属性，如下代码就是初始化实例属性：name
        和 score。
    4. 通过“类名(参数列表)”来调用构造函数。调用后，将创建好的对象返回给相应的变量。
        比如：s1 = Student('张三', 80)
    5. __init__()方法：初始化创建好的对象，初始化指的是：“给实例属性赋值”
    6. __new__()方法: 用于创建对象，但我们一般无需重定义该方法。
    7. 如果我们不定义__init__方法，系统会提供一个默认的__init__方法。如果我们定义了带参
        的__init__方法，系统不创建默认的__init__方法。
注：
    1. Python 中的 self 相当于 C++中的 self 指针，JAVA 和 C#中的 this 关键字。Python 中，
        self 必须为构造函数的第一个参数，名字可以任意修改。但一般遵守惯例，都叫做 self。
'''

class Student:
    def __init__(self,name,score): #构造方法第一个参数必须为 self
        self.name = name #实例属性
        self.score = score
    def say_score(self): #实例方法
        print(self.name,'的分数是：',self.score)

s1 = Student('张三',80) #s1 是实例对象，自动调用__init__()方法
s1.say_score()